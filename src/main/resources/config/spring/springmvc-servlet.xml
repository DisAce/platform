<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd	
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"
	default-lazy-init="true">
	
	<!-- 自动搜索@Controller的类 -->
	<context:component-scan base-package="org.coiol.platform.web" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 加入Aspectj配置 -->
	<aop:aspectj-autoproxy  proxy-target-class="true"/>
	
	
	<!-- controller层的属性和配置文件读入 ,多个用逗号隔开 <context:property-placeholder location="classpath:/config/others/config.properties" /> -->

	<!-- 应用属性文件读入 
	<bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:/config/others/config.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>
	-->
	<!-- 用于持有applicationProperties,将properties转变为静态方法使用,PropertiesHolder.getProperty("somekey") 
	<bean class="org.coiol.platform.common.utils.PropertiesHolder">
		<property name="properties" ref="applicationProperties" />
	</bean>
	-->
	<!-- PropertyPlaceholderConfigurer,用于spring ${placeholder}的解析-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>
 	
	
	<!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
	<!--  <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>  -->
	<mvc:resources mapping="/static/**" location="/static/" />
	
	
		<!-- 避免IE执行AJAX时,返回JSON出现下载文件   必须放置在  mvc:annotation-driven 之前-->
		<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
		    <property name="supportedMediaTypes">    
		        <list>    
		            <value>text/html;charset=UTF-8</value>  
		            <value>application/json;charset=UTF-8</value>      
		        </list>    
		    </property>    
		</bean>    
		  
		<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射     -->
		<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">    
		    <property name="messageConverters">    
		        <list>    
		            <ref bean="mappingJacksonHttpMessageConverter" />    
		        </list>    
		    </property>    
		</bean> 
	<!-- Configures support for @Controllers <mvc:annotation-driven/>相当于注册了DefaultAnnotationHandlerMapping
	和AnnotationMethodHandlerAdapter两个bean，配置一些messageconverter。即解决了@Controller注解的使用前提配置。
	如果不用这个，则要声明下面2个bean  -->
	<!-- 启动Springmvc注解驱动 -->
	<mvc:annotation-driven />
	
		<!--
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		 拦截器注册 -->
		<!-- <property name="interceptors">
			<bean class="com.company.project.common.springmvc.interceptor.SharedRenderVariableInterceptor"/>
		</property> 
	</bean>
		-->

	<!-- jsp视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 针对类、方法级别的权限拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/fileupload" />
			<mvc:mapping path="/admin/**"/>
			<mvc:mapping path="/main/" />
			<mvc:mapping path="/main**/**" />
			<mvc:mapping path="/header*" />
			<mvc:mapping path="/welcome*" />
			<mvc:mapping path="/treeMenu*" />
			<mvc:mapping path="/role**/**" />
			<mvc:mapping path="/user**/**" />
			<mvc:mapping path="/field**/**" />
			<mvc:mapping path="/file**/**" />
			<mvc:mapping path="/oprator*/**" />
			<bean class="org.coiol.platform.web.interseptor.LoginInterceptor">
			<property name="excludeUrls">
					<list>
						<value>/login</value>
						<value>/resetpwd</value>
						<value>/Authentication/captchaImage.do</value>
						<value>/admin/exit.html</value>
						<value>/admin/downloadDir.html</value>
						<value>/admin/rollBack.html</value>
						<value>/intercept</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!--开发期间注释掉，上线后启用 错误解析器 发生错误默认会跳转到/web-inf/views/timeout.jsp -->
	 <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
	 	<property name="defaultErrorView" value="timeout" /> 
	 	<property name="exceptionMappings"> 
	 		<props>
		 		<prop key="java.sql.SQLException">timeout</prop> 
		 		<prop key="java.lang.RuntimeException">timeout</prop> 
				<prop key="org.springframework.transaction.TransactionException">timeout</prop> 
				<prop key="org.springframework.dao.DataAccessException">timeout</prop> 
			</props> 
		</property> 
	</bean> 

	<!-- 国际化,并且可以批定文件编码,可以使用classpath: 或者WEB-INF/ 前缀 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:/config/others/messages</value>
				<value>classpath:ValidationMessages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 解析request的编码 ，Default is ISO-8859-1 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
		<property name="maxUploadSize" value="1048576000" />
		<!--被允许的最大的内存的大小，Default is 10240 bytes -->
		<property name="maxInMemorySize" value="20480" />
		<!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
		<property name="resolveLazily" value="true" />
	</bean>
</beans>
